/* generated by template org.nest.nestml.neuron.NeuronHeader*/

/*
*  terub_neuron_stn.h
*
*  This file is part of NEST.
*
*  Copyright (C) 2004 The NEST Initiative
*
*  NEST is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 2 of the License, or
*  (at your option) any later version.
*
*  NEST is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
*
*/

#ifndef TERUB_NEURON_STN
#define TERUB_NEURON_STN
#include "config.h"

#ifdef HAVE_GSL
#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_odeiv.h>
// forwards the declaration of the function
extern "C" inline int terub_neuron_stn_dynamics(double, const double y[],
                                                double f[], void *pnode);

// Includes from nestkernel:
#include "archiving_node.h"
#include "connection.h"
#include "event.h"
#include "nest_types.h"
#include "ring_buffer.h"
#include "universal_data_logger.h"

// Includes from sli:
#include "dictdatum.h"

/* BeginDocumentation
Name: terub_neuron_stn .

//
Name: terub_neuron_stn - Terman Rubin neuron model.

Description:

  terub_neuron_stn is an implementation of a spiking neuron using the Terman
Rubin model
  based on the Hodgkin-Huxley formalism.

  (1) Post-syaptic currents
  Incoming spike events induce a post-synaptic change of current modelled
  by an alpha function. The alpha function is normalised such that an event of
  weight 1.0 results in a peak current of 1 pA.


  (2) Spike Detection
  Spike detection is done by a combined threshold-and-local-maximum search: if
there
  is a local maximum above a certain threshold of the membrane potential, it is
considered a spike.

Problems/Todo:

  better spike detection

References:
  Terman, D. and Rubin, J.E. and Yew, A.C. and Wilson, C.J.
  Activity Patterns in a Model for the Subthalamopallidal Network
  of the Basal Ganglia
  The Journal of Neuroscience, 22(7), 2963-2976 (2002)

  Rubin, J.E. and Terman, D.
  High Frequency Stimulation of the Subthalamic Nucleus Eliminates
  Pathological Thalamic Rhythmicity in a Computational Model
  Journal of Computational Neuroscience, 16, 211-235 (2004)


Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

Author: Martin Ebert
//

Parameters:

Remarks:
Empty

References:
Empty

Sends: nest::SpikeEvent

Receives: Spike, Current, DataLoggingRequest


SeeAlso:
Empty
*/
class terub_neuron_stn : public nest::Archiving_Node {
public:
  /**
  * The constructor is only used to create the model prototype in the model
  * manager.
  */
  terub_neuron_stn();

  /**
  * The copy constructor is used to create model copies and instances of the
  * model.
  * @node The copy constructor needs to initialize the parameters and the state.
  *       Initialization of buffers and interal variables is deferred to
  *       @c init_buffers_() and @c calibrate().
  */
  terub_neuron_stn(const terub_neuron_stn &);

  /**
  * Releases resources.
  */
  ~terub_neuron_stn();
  /**
  * Import sets of overloaded virtual functions.
  * This is necessary to ensure proper overload and overriding resolution.
  * @see http://www.gotw.ca/gotw/005.htm.
  */
  using nest::Node::handles_test_event;
  using nest::Node::handle;

  /**
  * Used to validate that we can send nest::SpikeEvent to desired target:port.
  */
  nest::port send_test_event(nest::Node &target, nest::rport receptor_type,
                             nest::synindex, bool);

  /**
  * @defgroup mynest_handle Functions handling incoming events.
  * We tell nest that we can handle incoming events of various types by
  * defining @c handle() and @c connect_sender() for the given event.
  * @{
  */
  void handle(nest::SpikeEvent &);         //! accept spikes
  void handle(nest::CurrentEvent &);       //! accept input current
  void handle(nest::DataLoggingRequest &); //! allow recording with multimeter

  nest::port handles_test_event(nest::SpikeEvent &, nest::port);
  nest::port handles_test_event(nest::CurrentEvent &, nest::port);
  nest::port handles_test_event(nest::DataLoggingRequest &, nest::port);
  /** @} */

  // SLI communication functions:
  void get_status(DictionaryDatum &) const;
  void set_status(const DictionaryDatum &);

  // Generate function header

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_V_m() const { return S_.y[State_::V_m]; }

  inline void set_V_m(const double v) { S_.y[State_::V_m] = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_g_in() const { return S_.y[State_::g_in]; }

  inline void set_g_in(const double v) { S_.y[State_::g_in] = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_g_ex() const { return S_.y[State_::g_ex]; }

  inline void set_g_ex(const double v) { S_.y[State_::g_ex] = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_gate_h() const { return S_.y[State_::gate_h]; }

  inline void set_gate_h(const double v) { S_.y[State_::gate_h] = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_gate_n() const { return S_.y[State_::gate_n]; }

  inline void set_gate_n(const double v) { S_.y[State_::gate_n] = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_gate_r() const { return S_.y[State_::gate_r]; }

  inline void set_gate_r(const double v) { S_.y[State_::gate_r] = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_Ca_con() const { return S_.y[State_::Ca_con]; }

  inline void set_Ca_con(const double v) { S_.y[State_::Ca_con] = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get___D_g_ex() const { return S_.y[State_::__D_g_ex]; }

  inline void set___D_g_ex(const double v) { S_.y[State_::__D_g_ex] = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get___D_g_in() const { return S_.y[State_::__D_g_in]; }

  inline void set___D_g_in(const double v) { S_.y[State_::__D_g_in] = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_E_L() const { return P_.E_L; }

  inline void set_E_L(const double v) { P_.E_L = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_g_L() const { return P_.g_L; }

  inline void set_g_L(const double v) { P_.g_L = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_C_m() const { return P_.C_m; }

  inline void set_C_m(const double v) { P_.C_m = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_E_Na() const { return P_.E_Na; }

  inline void set_E_Na(const double v) { P_.E_Na = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_g_Na() const { return P_.g_Na; }

  inline void set_g_Na(const double v) { P_.g_Na = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_E_K() const { return P_.E_K; }

  inline void set_E_K(const double v) { P_.E_K = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_g_K() const { return P_.g_K; }

  inline void set_g_K(const double v) { P_.g_K = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_E_Ca() const { return P_.E_Ca; }

  inline void set_E_Ca(const double v) { P_.E_Ca = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_g_Ca() const { return P_.g_Ca; }

  inline void set_g_Ca(const double v) { P_.g_Ca = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_g_T() const { return P_.g_T; }

  inline void set_g_T(const double v) { P_.g_T = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_g_ahp() const { return P_.g_ahp; }

  inline void set_g_ahp(const double v) { P_.g_ahp = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_syn_ex() const { return P_.tau_syn_ex; }

  inline void set_tau_syn_ex(const double v) { P_.tau_syn_ex = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_syn_in() const { return P_.tau_syn_in; }

  inline void set_tau_syn_in(const double v) { P_.tau_syn_in = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_I_e() const { return P_.I_e; }

  inline void set_I_e(const double v) { P_.I_e = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_E_gs() const { return P_.E_gs; }

  inline void set_E_gs(const double v) { P_.E_gs = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_t_ref() const { return P_.t_ref; }

  inline void set_t_ref(const double v) { P_.t_ref = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_I_stim() const { return P_.I_stim; }

  inline void set_I_stim(const double v) { P_.I_stim = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_PSCurrInit_E() const { return V_.PSCurrInit_E; }

  inline void set_PSCurrInit_E(const double v) { V_.PSCurrInit_E = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_PSCurrInit_I() const { return V_.PSCurrInit_I; }

  inline void set_PSCurrInit_I(const double v) { V_.PSCurrInit_I = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline long get_refractory_counts() const { return V_.refractory_counts; }

  inline void set_refractory_counts(const long v) { V_.refractory_counts = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline long get_r() const { return V_.r; }

  inline void set_r(const long v) { V_.r = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_n_0() const { return S_.tau_n_0; }
  inline void set_tau_n_0(const double v) { S_.tau_n_0 = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_n_1() const { return S_.tau_n_1; }
  inline void set_tau_n_1(const double v) { S_.tau_n_1 = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_theta_n_tau() const { return S_.theta_n_tau; }
  inline void set_theta_n_tau(const double v) { S_.theta_n_tau = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_sigma_n_tau() const { return S_.sigma_n_tau; }
  inline void set_sigma_n_tau(const double v) { S_.sigma_n_tau = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_h_0() const { return S_.tau_h_0; }
  inline void set_tau_h_0(const double v) { S_.tau_h_0 = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_h_1() const { return S_.tau_h_1; }
  inline void set_tau_h_1(const double v) { S_.tau_h_1 = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_theta_h_tau() const { return S_.theta_h_tau; }
  inline void set_theta_h_tau(const double v) { S_.theta_h_tau = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_sigma_h_tau() const { return S_.sigma_h_tau; }
  inline void set_sigma_h_tau(const double v) { S_.sigma_h_tau = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_r_0() const { return S_.tau_r_0; }
  inline void set_tau_r_0(const double v) { S_.tau_r_0 = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_r_1() const { return S_.tau_r_1; }
  inline void set_tau_r_1(const double v) { S_.tau_r_1 = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_theta_r_tau() const { return S_.theta_r_tau; }
  inline void set_theta_r_tau(const double v) { S_.theta_r_tau = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_sigma_r_tau() const { return S_.sigma_r_tau; }
  inline void set_sigma_r_tau(const double v) { S_.sigma_r_tau = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_theta_a() const { return S_.theta_a; }
  inline void set_theta_a(const double v) { S_.theta_a = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_sigma_a() const { return S_.sigma_a; }
  inline void set_sigma_a(const double v) { S_.sigma_a = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_theta_h() const { return S_.theta_h; }
  inline void set_theta_h(const double v) { S_.theta_h = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_sigma_h() const { return S_.sigma_h; }
  inline void set_sigma_h(const double v) { S_.sigma_h = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_theta_m() const { return S_.theta_m; }
  inline void set_theta_m(const double v) { S_.theta_m = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_sigma_m() const { return S_.sigma_m; }
  inline void set_sigma_m(const double v) { S_.sigma_m = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_theta_n() const { return S_.theta_n; }
  inline void set_theta_n(const double v) { S_.theta_n = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_sigma_n() const { return S_.sigma_n; }
  inline void set_sigma_n(const double v) { S_.sigma_n = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_theta_r() const { return S_.theta_r; }
  inline void set_theta_r(const double v) { S_.theta_r = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_sigma_r() const { return S_.sigma_r; }
  inline void set_sigma_r(const double v) { S_.sigma_r = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_theta_s() const { return S_.theta_s; }
  inline void set_theta_s(const double v) { S_.theta_s = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_sigma_s() const { return S_.sigma_s; }
  inline void set_sigma_s(const double v) { S_.sigma_s = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_theta_b() const { return S_.theta_b; }
  inline void set_theta_b(const double v) { S_.theta_b = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_sigma_b() const { return S_.sigma_b; }
  inline void set_sigma_b(const double v) { S_.sigma_b = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_phi_h() const { return S_.phi_h; }
  inline void set_phi_h(const double v) { S_.phi_h = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_phi_n() const { return S_.phi_n; }
  inline void set_phi_n(const double v) { S_.phi_n = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_phi_r() const { return S_.phi_r; }
  inline void set_phi_r(const double v) { S_.phi_r = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_epsilon() const { return S_.epsilon; }
  inline void set_epsilon(const double v) { S_.epsilon = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_k_Ca() const { return S_.k_Ca; }
  inline void set_k_Ca(const double v) { S_.k_Ca = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_k1() const { return S_.k1; }
  inline void set_k1(const double v) { S_.k1 = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_I_ex_mod() const { return S_.I_ex_mod; }
  inline void set_I_ex_mod(const double v) { S_.I_ex_mod = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_I_in_mod() const { return S_.I_in_mod; }
  inline void set_I_in_mod(const double v) { S_.I_in_mod = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_n() const { return S_.tau_n; }
  inline void set_tau_n(const double v) { S_.tau_n = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_h() const { return S_.tau_h; }
  inline void set_tau_h(const double v) { S_.tau_h = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_r() const { return S_.tau_r; }
  inline void set_tau_r(const double v) { S_.tau_r = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_a_inf() const { return S_.a_inf; }
  inline void set_a_inf(const double v) { S_.a_inf = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_h_inf() const { return S_.h_inf; }
  inline void set_h_inf(const double v) { S_.h_inf = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_m_inf() const { return S_.m_inf; }
  inline void set_m_inf(const double v) { S_.m_inf = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_n_inf() const { return S_.n_inf; }
  inline void set_n_inf(const double v) { S_.n_inf = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_r_inf() const { return S_.r_inf; }
  inline void set_r_inf(const double v) { S_.r_inf = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_s_inf() const { return S_.s_inf; }
  inline void set_s_inf(const double v) { S_.s_inf = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_b_inf() const { return S_.b_inf; }
  inline void set_b_inf(const double v) { S_.b_inf = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_I_Na() const { return S_.I_Na; }
  inline void set_I_Na(const double v) { S_.I_Na = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_I_K() const { return S_.I_K; }
  inline void set_I_K(const double v) { S_.I_K = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_I_L() const { return S_.I_L; }
  inline void set_I_L(const double v) { S_.I_L = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_I_T() const { return S_.I_T; }
  inline void set_I_T(const double v) { S_.I_T = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_I_Ca() const { return S_.I_Ca; }
  inline void set_I_Ca(const double v) { S_.I_Ca = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_I_ahp() const { return S_.I_ahp; }
  inline void set_I_ahp(const double v) { S_.I_ahp = v; }

  inline nest::RingBuffer &get_spikeInh() { return B_.get_spikeInh(); };
  inline nest::RingBuffer &get_spikeExc() { return B_.get_spikeExc(); };
  inline nest::RingBuffer &get_currents() { return B_.get_currents(); };

protected:
  //! Reset parameters and state of neuron.

  //! Reset state of neuron.
  void init_state_(const Node &proto);

  //! Reset internal buffers of neuron.
  void init_buffers_();

  //! Initialize auxiliary quantities, leave parameters and state untouched.
  void calibrate();

  //! Take neuron through given time interval
  void update(nest::Time const &, const long, const long);

  // The next two classes need to be friends to access the State_ class/member
  friend class nest::RecordablesMap<terub_neuron_stn>;
  friend class nest::UniversalDataLogger<terub_neuron_stn>;

  /**
  * Free parameters of the neuron.
  *
  *
  *
  * These are the parameters that can be set by the user through @c SetStatus.
  * They are initialized from the model prototype when the node is created.
  * Parameters do not change during calls to @c update() and are not reset by
  * @c ResetNetwork.
  *
  * @note Parameters_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If Parameters_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If Parameters_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct Parameters_ {
    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double E_L; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double g_L; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double C_m; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double E_Na; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double g_Na; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double E_K; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double g_K; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double E_Ca; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double g_Ca; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double g_T; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double g_ahp; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_syn_ex; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_syn_in; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double I_e; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double E_gs; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double t_ref; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double I_stim; //

    /** Initialize parameters to their default values. */
    Parameters_();

    /** Set parameter values from dictionary. */
    void set(const DictionaryDatum &);

    // TODO only for invariants
    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_E_L() const { return E_L; }
    inline void set_E_L(const double E_L) { this->E_L = E_L; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_g_L() const { return g_L; }
    inline void set_g_L(const double g_L) { this->g_L = g_L; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_C_m() const { return C_m; }
    inline void set_C_m(const double C_m) { this->C_m = C_m; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_E_Na() const { return E_Na; }
    inline void set_E_Na(const double E_Na) { this->E_Na = E_Na; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_g_Na() const { return g_Na; }
    inline void set_g_Na(const double g_Na) { this->g_Na = g_Na; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_E_K() const { return E_K; }
    inline void set_E_K(const double E_K) { this->E_K = E_K; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_g_K() const { return g_K; }
    inline void set_g_K(const double g_K) { this->g_K = g_K; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_E_Ca() const { return E_Ca; }
    inline void set_E_Ca(const double E_Ca) { this->E_Ca = E_Ca; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_g_Ca() const { return g_Ca; }
    inline void set_g_Ca(const double g_Ca) { this->g_Ca = g_Ca; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_g_T() const { return g_T; }
    inline void set_g_T(const double g_T) { this->g_T = g_T; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_g_ahp() const { return g_ahp; }
    inline void set_g_ahp(const double g_ahp) { this->g_ahp = g_ahp; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_tau_syn_ex() const { return tau_syn_ex; }
    inline void set_tau_syn_ex(const double tau_syn_ex) {
      this->tau_syn_ex = tau_syn_ex;
    }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_tau_syn_in() const { return tau_syn_in; }
    inline void set_tau_syn_in(const double tau_syn_in) {
      this->tau_syn_in = tau_syn_in;
    }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_I_e() const { return I_e; }
    inline void set_I_e(const double I_e) { this->I_e = I_e; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_E_gs() const { return E_gs; }
    inline void set_E_gs(const double E_gs) { this->E_gs = E_gs; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_t_ref() const { return t_ref; }
    inline void set_t_ref(const double t_ref) { this->t_ref = t_ref; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_I_stim() const { return I_stim; }
    inline void set_I_stim(const double I_stim) { this->I_stim = I_stim; }
  };

  /**
  * Dynamic state of the neuron.
  *
  *
  *
  * These are the state variables that are advanced in time by calls to
  * @c update(). In many models, some or all of them can be set by the user
  * through @c SetStatus. The state variables are initialized from the model
  * prototype when the node is created. State variables are reset by @c
  * ResetNetwork.
  *
  * @note State_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If State_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If State_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct State_ {
    //! Symbolic indices to the elements of the state vector y
    enum StateVecElems {
      V_m,
      g_in,
      g_ex,
      gate_h,
      gate_n,
      gate_r,
      Ca_con,
      __D_g_ex,
      __D_g_in,
      STATE_VEC_SIZE
    };
    //! state vector, must be C-array for GSL solver
    double y[STATE_VEC_SIZE];

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_n_0; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_n_1; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double theta_n_tau; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double sigma_n_tau; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_h_0; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_h_1; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double theta_h_tau; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double sigma_h_tau; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_r_0; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_r_1; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double theta_r_tau; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double sigma_r_tau; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double theta_a; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double sigma_a; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double theta_h; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double sigma_h; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double theta_m; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double sigma_m; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double theta_n; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double sigma_n; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double theta_r; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double sigma_r; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double theta_s; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double sigma_s; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double theta_b; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double sigma_b; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double phi_h; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double phi_n; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double phi_r; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double epsilon; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double k_Ca; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double k1; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double I_ex_mod; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double I_in_mod; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_n; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_h; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_r; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double a_inf; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double h_inf; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double m_inf; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double n_inf; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double r_inf; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double s_inf; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double b_inf; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double I_Na; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double I_K; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double I_L; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double I_T; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double I_Ca; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double I_ahp; //

    State_();

    /**
    * Set state values from dictionary.
    */
    void set(const DictionaryDatum &, const Parameters_ &);
  };

  /**
  * Internal variables of the neuron.
  *
  *
  *
  * These variables must be initialized by @c calibrate, which is called before
  * the first call to @c update() upon each call to @c Simulate.
  * @node Variables_ needs neither constructor, copy constructor or assignment
  * operator,
  *       since it is initialized by @c calibrate(). If Variables_ has members
  * that
  *       cannot destroy themselves, Variables_ will need a destructor.
  */
  struct Variables_ {
    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double PSCurrInit_E; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double PSCurrInit_I; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    long refractory_counts; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    long r; //

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_PSCurrInit_E() const { return PSCurrInit_E; }
    inline void set_PSCurrInit_E(const double PSCurrInit_E) {
      this->PSCurrInit_E = PSCurrInit_E;
    }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_PSCurrInit_I() const { return PSCurrInit_I; }
    inline void set_PSCurrInit_I(const double PSCurrInit_I) {
      this->PSCurrInit_I = PSCurrInit_I;
    }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline long get_refractory_counts() const { return refractory_counts; }
    inline void set_refractory_counts(const long refractory_counts) {
      this->refractory_counts = refractory_counts;
    }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline long get_r() const { return r; }
    inline void set_r(const long r) { this->r = r; }
  };

  /**
    * Buffers of the neuron.
    * Ususally buffers for incoming spikes and data logged for analog recorders.
    * Buffers must be initialized by @c init_buffers_(), which is called before
    * @c calibrate() on the first call to @c Simulate after the start of NEST,
    * ResetKernel or ResetNetwork.
    * @node Buffers_ needs neither constructor, copy constructor or assignment
   * operator,
    *       since it is initialized by @c init_nodes_(). If Buffers_ has members
   * that
    *       cannot destroy themselves, Buffers_ will need a destructor.
    */
  struct Buffers_ {
    Buffers_(terub_neuron_stn &);
    Buffers_(const Buffers_ &, terub_neuron_stn &);

    inline nest::RingBuffer &get_spikeInh() { return spikeInh; }
    nest::RingBuffer spikeInh;
    //!< Buffer incoming Buffers through delay, as sum
    ;
    double spikeInh_last_value_;
    inline nest::RingBuffer &get_spikeExc() { return spikeExc; }
    nest::RingBuffer spikeExc;
    //!< Buffer incoming Buffers through delay, as sum
    ;
    double spikeExc_last_value_;
    inline nest::RingBuffer &get_currents() { return currents; }
    nest::RingBuffer currents;
    //!< Buffer incoming Buffers through delay, as sum
    ;
    double currents_last_value_;

    /** Logger for all analog data */
    nest::UniversalDataLogger<terub_neuron_stn> logger_;

    std::vector<long> receptor_types_;

    /* GSL ODE stuff */
    gsl_odeiv_step *s_;    //!< stepping function
    gsl_odeiv_control *c_; //!< adaptive stepsize control function
    gsl_odeiv_evolve *e_;  //!< evolution function
    gsl_odeiv_system sys_; //!< struct describing system
  };

private:
  /**
  * @defgroup pif_members Member variables of neuron model.
  * Each model neuron should have precisely the following four data members,
  * which are one instance each of the parameters, state, buffers and variables
  * structures. Experience indicates that the state and variables member should
  * be next to each other to achieve good efficiency (caching).
  * @note Devices require one additional data member, an instance of the @c
  * Device
  *       child class they belong to.
  * @{
  */
  Parameters_ P_; //!< Free parameters.
  State_ S_;      //!< Dynamic state.
  Variables_ V_;  //!< Internal Variables
  Buffers_ B_;    //!< Buffers.

  //! Mapping of recordables names to access functions
  static nest::RecordablesMap<terub_neuron_stn> recordablesMap_;

  friend int terub_neuron_stn_dynamics(double, const double y[], double f[],
                                       void *pnode);
  /** @} */
}; /* neuron terub_neuron_stn */

inline nest::port terub_neuron_stn::send_test_event(nest::Node &target,
                                                    nest::rport receptor_type,
                                                    nest::synindex, bool) {
  // You should usually not change the code in this function.
  // It confirms that the target of connection @c c accepts @c nest::SpikeEvent
  // on
  // the given @c receptor_type.
  nest::SpikeEvent e;
  e.set_sender(*this);

  return target.handles_test_event(e, receptor_type);
}

inline nest::port
terub_neuron_stn::handles_test_event(nest::SpikeEvent &,
                                     nest::port receptor_type) {

  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c SpikeEvent on port 0. You need to extend the function
  // if you want to differentiate between input ports.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());
  return 0;
}

inline nest::port
terub_neuron_stn::handles_test_event(nest::CurrentEvent &,
                                     nest::port receptor_type) {
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c CurrentEvent on port 0. You need to extend the function
  // if you want to differentiate between input ports.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());
  return 0;
}
inline nest::port
terub_neuron_stn::handles_test_event(nest::DataLoggingRequest &dlr,
                                     nest::port receptor_type) {
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c DataLoggingRequest on port 0.
  // The function also tells the built-in UniversalDataLogger that this node
  // is recorded from and that it thus needs to collect data during simulation.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());

  return B_.logger_.connect_logging_device(dlr, recordablesMap_);
}

// TODO call get_status on used or internal components
inline void terub_neuron_stn::get_status(DictionaryDatum &__d) const {
  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "E_L", get_E_L());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "g_L", get_g_L());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "C_m", get_C_m());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "E_Na", get_E_Na());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "g_Na", get_g_Na());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "E_K", get_E_K());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "g_K", get_g_K());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "E_Ca", get_E_Ca());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "g_Ca", get_g_Ca());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "g_T", get_g_T());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "g_ahp", get_g_ahp());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "tau_syn_ex", get_tau_syn_ex());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "tau_syn_in", get_tau_syn_in());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "I_e", get_I_e());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "E_gs", get_E_gs());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "t_ref", get_t_ref());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "I_stim", get_I_stim());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "V_m", get_V_m());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "g_in", get_g_in());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "g_ex", get_g_ex());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "gate_h", get_gate_h());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "gate_n", get_gate_n());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "gate_r", get_gate_r());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "Ca_con", get_Ca_con());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "__D_g_ex", get___D_g_ex());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "__D_g_in", get___D_g_in());
  Archiving_Node::get_status( __d );

  (*__d)[nest::names::recordables] = recordablesMap_.get_list();
}

inline void terub_neuron_stn::set_status(const DictionaryDatum &__d) {

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_E_L;
  if (updateValue<double>(__d, "E_L", tmp_E_L)) {
    set_E_L(tmp_E_L);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_g_L;
  if (updateValue<double>(__d, "g_L", tmp_g_L)) {
    set_g_L(tmp_g_L);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_C_m;
  if (updateValue<double>(__d, "C_m", tmp_C_m)) {
    set_C_m(tmp_C_m);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_E_Na;
  if (updateValue<double>(__d, "E_Na", tmp_E_Na)) {
    set_E_Na(tmp_E_Na);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_g_Na;
  if (updateValue<double>(__d, "g_Na", tmp_g_Na)) {
    set_g_Na(tmp_g_Na);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_E_K;
  if (updateValue<double>(__d, "E_K", tmp_E_K)) {
    set_E_K(tmp_E_K);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_g_K;
  if (updateValue<double>(__d, "g_K", tmp_g_K)) {
    set_g_K(tmp_g_K);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_E_Ca;
  if (updateValue<double>(__d, "E_Ca", tmp_E_Ca)) {
    set_E_Ca(tmp_E_Ca);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_g_Ca;
  if (updateValue<double>(__d, "g_Ca", tmp_g_Ca)) {
    set_g_Ca(tmp_g_Ca);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_g_T;
  if (updateValue<double>(__d, "g_T", tmp_g_T)) {
    set_g_T(tmp_g_T);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_g_ahp;
  if (updateValue<double>(__d, "g_ahp", tmp_g_ahp)) {
    set_g_ahp(tmp_g_ahp);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_tau_syn_ex;
  if (updateValue<double>(__d, "tau_syn_ex", tmp_tau_syn_ex)) {
    set_tau_syn_ex(tmp_tau_syn_ex);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_tau_syn_in;
  if (updateValue<double>(__d, "tau_syn_in", tmp_tau_syn_in)) {
    set_tau_syn_in(tmp_tau_syn_in);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_I_e;
  if (updateValue<double>(__d, "I_e", tmp_I_e)) {
    set_I_e(tmp_I_e);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_E_gs;
  if (updateValue<double>(__d, "E_gs", tmp_E_gs)) {
    set_E_gs(tmp_E_gs);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_t_ref;
  if (updateValue<double>(__d, "t_ref", tmp_t_ref)) {
    set_t_ref(tmp_t_ref);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_I_stim;
  if (updateValue<double>(__d, "I_stim", tmp_I_stim)) {
    set_I_stim(tmp_I_stim);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_V_m;
  if (updateValue<double>(__d, "V_m", tmp_V_m)) {
    set_V_m(tmp_V_m);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_g_in;
  if (updateValue<double>(__d, "g_in", tmp_g_in)) {
    set_g_in(tmp_g_in);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_g_ex;
  if (updateValue<double>(__d, "g_ex", tmp_g_ex)) {
    set_g_ex(tmp_g_ex);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_gate_h;
  if (updateValue<double>(__d, "gate_h", tmp_gate_h)) {
    set_gate_h(tmp_gate_h);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_gate_n;
  if (updateValue<double>(__d, "gate_n", tmp_gate_n)) {
    set_gate_n(tmp_gate_n);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_gate_r;
  if (updateValue<double>(__d, "gate_r", tmp_gate_r)) {
    set_gate_r(tmp_gate_r);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_Ca_con;
  if (updateValue<double>(__d, "Ca_con", tmp_Ca_con)) {
    set_Ca_con(tmp_Ca_con);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp___D_g_ex;
  if (updateValue<double>(__d, "__D_g_ex", tmp___D_g_ex)) {
    set___D_g_ex(tmp___D_g_ex);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp___D_g_in;
  if (updateValue<double>(__d, "__D_g_in", tmp___D_g_in)) {
    set___D_g_in(tmp___D_g_in);
  }

  // We now know that (ptmp, stmp) are consistent. We do not
  // write them back to (P_, S_) before we are also sure that
  // the properties to be set in the parent class are internally
  // consistent.
  Archiving_Node::set_status(__d);

  // if we get here, temporaries contain consistent set of properties
  // P_ = ptmp;
  // S_ = stmp;
};

#endif /* #ifndef TERUB_NEURON_STN */
#endif /* HAVE GSL */
